{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, withModifiers as _withModifiers, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  class: \"navbar\"\n};\nconst _hoisted_3 = {\n  class: \"category-section\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"category-list\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  key: 1,\n  class: \"no-categories\"\n};\nconst _hoisted_7 = {\n  class: \"category-section\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"nav\", _hoisted_2, [_cache[5] || (_cache[5] = _createElementVNode(\"h1\", {\n    class: \"dashboard-title\"\n  }, \"Manager Dashboard\", -1 /* HOISTED */)), _createVNode(_component_router_link, {\n    to: \"/\",\n    class: \"logout-link\",\n    onClick: _ctx.logout\n  }, {\n    default: _withCtx(() => _cache[4] || (_cache[4] = [_createTextVNode(\" Logout \")])),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"])]), _createElementVNode(\"div\", _hoisted_3, [_cache[6] || (_cache[6] = _createElementVNode(\"h2\", null, \"Create Categories\", -1 /* HOISTED */)), $data.approvedCategories.length !== 0 ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.approvedCategories, category => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: category.id,\n      class: \"category-item\"\n    }, [_createVNode(_component_router_link, {\n      to: {\n        name: 'category_products',\n        params: {\n          category_id: category.id\n        }\n      },\n      class: \"category-link\"\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"strong\", null, _toDisplayString(category.name), 1 /* TEXT */)]),\n\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"to\"]), _createElementVNode(\"button\", {\n      onClick: _withModifiers($event => $options.deleteCategory(category.id), [\"prevent\"]),\n      class: \"delete\"\n    }, \" Delete Category Request \", 8 /* PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_6, \"No approved categories available.\"))]), _createElementVNode(\"div\", _hoisted_7, [_cache[7] || (_cache[7] = _createElementVNode(\"h2\", null, \"Create New Category\", -1 /* HOISTED */)), _cache[8] || (_cache[8] = _createElementVNode(\"label\", {\n    for: \"category_name\",\n    class: \"form-label\"\n  }, \"Category Name:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.formData.category_name = $event),\n    required: \"\",\n    class: \"form-input\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.formData.category_name]]), _cache[9] || (_cache[9] = _createElementVNode(\"label\", {\n    for: \"category_image\",\n    class: \"form-label\"\n  }, \"Category Image:\", -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.handleImageUpload && $options.handleImageUpload(...args)),\n    class: \"form-input\",\n    accept: \"image/*\"\n  }, null, 32 /* NEED_HYDRATION */), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.createCategory && $options.createCategory(...args), [\"prevent\"])),\n    class: \"add\"\n  }, \" Create Category Request \")]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.exportManagerCSV && $options.exportManagerCSV(...args)),\n    class: \"export-csv\"\n  }, \"Export Csv\")]);\n}","map":{"version":3,"names":["id","class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_router_link","to","onClick","_ctx","logout","_cache","_hoisted_3","$data","approvedCategories","length","_hoisted_4","_Fragment","_renderList","category","key","_toDisplayString","name","_withModifiers","$event","$options","deleteCategory","_hoisted_5","_hoisted_6","_hoisted_7","for","type","formData","category_name","required","onChange","args","handleImageUpload","accept","createCategory","exportManagerCSV"],"sources":["C:\\Users\\mahak\\Downloads\\21f2000845-freshcart\\Mad 2 project\\freshcart\\src\\components\\manager_dashboard.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <nav class=\"navbar\">\n      <h1 class=\"dashboard-title\">Manager Dashboard</h1>\n      <router-link to=\"/\" class=\"logout-link\" @click=\"logout\">\n        Logout\n      </router-link>\n    </nav>\n\n    <div class=\"category-section\">\n      <h2>Create Categories</h2>\n      <ul v-if=\"approvedCategories.length !== 0\" class=\"category-list\">\n        <li\n          v-for=\"category in approvedCategories\"\n          :key=\"category.id\"\n          class=\"category-item\"\n        >\n          <router-link\n            :to=\"{\n              name: 'category_products',\n              params: { category_id: category.id },\n            }\"\n            class=\"category-link\"\n          >\n            <strong> {{ category.name }}</strong>\n          </router-link>\n          <button @click.prevent=\"deleteCategory(category.id)\" class=\"delete\">\n            Delete Category Request\n          </button>\n        </li>\n      </ul>\n      <p v-else class=\"no-categories\">No approved categories available.</p>\n    </div>\n\n    <div class=\"category-section\">\n      <h2>Create New Category</h2>\n      <label for=\"category_name\" class=\"form-label\">Category Name:</label>\n      <input\n        type=\"text\"\n        v-model=\"formData.category_name\"\n        required\n        class=\"form-input\"\n      /><label for=\"category_image\" class=\"form-label\">Category Image:</label>\n      <input\n        type=\"file\"\n        @change=\"handleImageUpload\"\n        class=\"form-input\"\n        accept=\"image/*\"\n      />\n      <button @click.prevent=\"createCategory\" class=\"add\">\n        Create Category Request\n      </button>\n    </div>\n\n    <button @click=\"exportManagerCSV\" class=\"export-csv\">Export Csv</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ManagerDashboard\",\n  data() {\n    return {\n      account: {\n        username: \"\",\n        email: \"\",\n        id: null,\n        roles: [],\n      },\n      approvedCategories: [],\n      formData: {\n        category_name: \"\",\n        category_image: null,\n      },\n    };\n  },\n  async mounted() {\n    const email = this.$route.params.email;\n    const resaccount = await fetch(\n      `http://localhost:5000/api/getUserData/${email}`,\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authentication-Token\": localStorage.getItem(\"auth-token\"),\n        },\n      }\n    );\n    const dataaccount = await resaccount.json();\n    console.log(dataaccount);\n    if (resaccount.ok) {\n      this.account = dataaccount;\n      this.$store.commit(\"setCurrentUser\", {\n        id: dataaccount.id,\n        username: dataaccount.username,\n        email: dataaccount.email,\n        roles: dataaccount.roles,\n      });\n      console.log(\"setting done!\");\n    } else if (resaccount.status == 401) {\n      this.success = false;\n      this.error = dataaccount.response.error;\n    } else {\n      this.success = false;\n      this.error = dataaccount.message;\n      alert(\"something went wrong\");\n      this.$router.push(\"/\");\n      localStorage.clear();\n    }\n    const c_response = await fetch(\"http://localhost:5000/api/getCategory\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authentication-Token\": localStorage.getItem(\"auth-token\"),\n      },\n    });\n    const c_data = await c_response.json();\n    console.log(c_data);\n    if (c_response.ok && this.account.roles.includes(\"<Role 2>\")) {\n      this.approvedCategories = Array.isArray(c_data) ? c_data : [];\n    } else {\n      alert(\"Something went wrong\");\n      this.$router.push(\"/\");\n    }\n  },\n  computed: {\n    currentUserEmail() {\n      return this.$store.state.currentUserEmail;\n    },\n    currentUserId() {\n      return this.$store.state.currentUserId;\n    },\n    currentUserName() {\n      return this.$store.state.currentUsername;\n    },\n    isManager() {\n      return this.account.roles.includes(\"<Role 2>\");\n    },\n  },\n  methods: {\n    handleImageUpload(event) {\n      this.formData.category_image = event.target.files[0];\n    },\n    async createCategory() {\n      const shouldCreate = window.confirm(\n        \"Are you sure you want to create this category request?\"\n      );\n      if (!shouldCreate) {\n        return;\n      }\n      try {\n        const formdata = new FormData();\n        formdata.append(\"category_name\", this.formData.category_name);\n        if (this.formData.category_image) {\n          formdata.append(\"category_image\", this.formData.category_image);\n        }\n        const response = await fetch(\"http://localhost:5000/api/addCategory\", {\n          method: \"post\",\n          headers: {\n            \"Authentication-Token\": localStorage.getItem(\"auth-token\"),\n          },\n          body: formdata,\n        });\n\n        const data = await response.json();\n        console.log(data);\n\n        if (response.ok) {\n          alert(\"Category creation request sent successfully!\");\n          this.formData.category_name = \"\";\n          this.formData.category_image = null;\n        } else {\n          alert(\n            \"Failed to send category creation request, Category Already Exists\"\n          );\n          this.formData.category_name = \"\";\n        }\n      } catch (error) {\n        console.error(\"Error creating category:\", error);\n        alert(\"An error occurred while creating the category.\");\n      }\n    },\n    async deleteCategory(c_id) {\n      const shouldDelete = window.confirm(\n        \"Are you sure you want to delete this category request?\"\n      );\n      if (!shouldDelete) {\n        return;\n      }\n      try {\n        const response = await fetch(\n          `http://localhost:5000/api/deleteCategory/${c_id}`,\n          {\n            method: \"DELETE\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Authentication-Token\": localStorage.getItem(\"auth-token\"),\n            },\n          }\n        );\n        const data = await response.json();\n        console.log(data);\n        if (response.ok) {\n          alert(\"Delete Request Sent Successfully\");\n          this.categories = data.categories;\n        } else {\n          alert(\"Unable to send delete request.Try again!\");\n        }\n      } catch (error) {\n        console.error(error);\n        alert(\"Failed to send delete request. Try again!\");\n      }\n    },\n\n    async exportManagerCSV() {\n      try {\n        const user_id = this.$store.state.currentUserId;\n        const response = await fetch(\n          `http://localhost:5000/export_manager_csv/${user_id}`,\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Authentication-Token\": localStorage.getItem(\"auth-token\"),\n            },\n            responseType: \"blob\",\n          }\n        );\n        if (response.ok) {\n          const csvShop = await response.blob();\n          const csvUrl = URL.createObjectURL(csvShop);\n          const a = document.createElement(\"a\");\n          a.href = csvUrl;\n          a.download = `${user_id}_data.csv`;\n          a.click();\n          alert(\"CSV export job started\");\n        } else {\n          alert(\"Failed to start CSV export job\");\n        }\n      } catch (error) {\n        console.error(error);\n        alert(\"Failed to start CSV export job\");\n      }\n    },\n  },\n};\n</script>\n<style scoped>\n#app {\n  margin: 10px;\n  padding: 20px;\n}\n\n.dashboard-title {\n  font-size: 24px;\n  margin-bottom: 20px;\n  color: white;\n}\n\n.navbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #4caf50;\n  color: white;\n  padding: 10px;\n}\n\n.logout-link {\n  color: white;\n  text-decoration: none;\n  padding: 5px 10px;\n  background-color: #333;\n  border-radius: 5px;\n}\n\n.category-section {\n  margin-bottom: 30px;\n  margin-top: 20px;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  background-color: whitesmoke;\n}\n\n.category-list {\n  list-style: none;\n  padding: 0;\n}\n\n.category-item {\n  margin: 5px 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.category-link {\n  text-decoration: none;\n  color: #333;\n}\n\n.delete,\n.add,\n.export-csv {\n  background-color: #4caf50;\n  color: white;\n  border: none;\n  padding: 8px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 14px;\n  margin: 4px 2px;\n  cursor: pointer;\n}\n\n.delete:hover,\n.add:hover,\n.export-csv:hover {\n  background-color: #45a049;\n}\n.form-input {\n  width: 300px;\n  height: 30px;\n  border: 1px solid black;\n  border-radius: 4px;\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;EACNC,KAAK,EAAC;AAAQ;;EAOdA,KAAK,EAAC;AAAkB;;;EAEgBA,KAAK,EAAC;;;;;EAoBvCA,KAAK,EAAC;;;EAGbA,KAAK,EAAC;AAAkB;;;uBAjC/BC,mBAAA,CAsDM,OAtDNC,UAsDM,GArDJC,mBAAA,CAKM,OALNC,UAKM,G,0BAJJD,mBAAA,CAAkD;IAA9CH,KAAK,EAAC;EAAiB,GAAC,mBAAiB,sBAC7CK,YAAA,CAEcC,sBAAA;IAFDC,EAAE,EAAC,GAAG;IAACP,KAAK,EAAC,aAAa;IAAEQ,OAAK,EAAEC,IAAA,CAAAC;;sBAAQ,MAExDC,MAAA,QAAAA,MAAA,O,iBAFwD,UAExD,E;;oCAGFR,mBAAA,CAuBM,OAvBNS,UAuBM,G,0BAtBJT,mBAAA,CAA0B,YAAtB,mBAAiB,sBACXU,KAAA,CAAAC,kBAAkB,CAACC,MAAM,U,cAAnCd,mBAAA,CAmBK,MAnBLe,UAmBK,I,kBAlBHf,mBAAA,CAiBKgB,SAAA,QAAAC,WAAA,CAhBgBL,KAAA,CAAAC,kBAAkB,EAA9BK,QAAQ;yBADjBlB,mBAAA,CAiBK;MAfFmB,GAAG,EAAED,QAAQ,CAACpB,EAAE;MACjBC,KAAK,EAAC;QAENK,YAAA,CAQcC,sBAAA;MAPXC,EAAE;;;uBAAkFY,QAAQ,CAACpB;QAAE;;MAIhGC,KAAK,EAAC;;wBAEN,MAAqC,CAArCG,mBAAA,CAAqC,gBAAAkB,gBAAA,CAAzBF,QAAQ,CAACG,IAAI,iB;;;iDAE3BnB,mBAAA,CAES;MAFAK,OAAK,EAAAe,cAAA,CAAAC,MAAA,IAAUC,QAAA,CAAAC,cAAc,CAACP,QAAQ,CAACpB,EAAE;MAAGC,KAAK,EAAC;OAAS,2BAEpE,iBAAA2B,UAAA,E;qDAGJ1B,mBAAA,CAAqE,KAArE2B,UAAqE,EAArC,mCAAiC,G,GAGnEzB,mBAAA,CAkBM,OAlBN0B,UAkBM,G,0BAjBJ1B,mBAAA,CAA4B,YAAxB,qBAAmB,sB,0BACvBA,mBAAA,CAAoE;IAA7D2B,GAAG,EAAC,eAAe;IAAC9B,KAAK,EAAC;KAAa,gBAAc,sB,gBAC5DG,mBAAA,CAKE;IAJA4B,IAAI,EAAC,MAAM;+DACFlB,KAAA,CAAAmB,QAAQ,CAACC,aAAa,GAAAT,MAAA;IAC/BU,QAAQ,EAAR,EAAQ;IACRlC,KAAK,EAAC;iDAFGa,KAAA,CAAAmB,QAAQ,CAACC,aAAa,E,6BAG/B9B,mBAAA,CAAsE;IAA/D2B,GAAG,EAAC,gBAAgB;IAAC9B,KAAK,EAAC;KAAa,iBAAe,sBAChEG,mBAAA,CAKE;IAJA4B,IAAI,EAAC,MAAM;IACVI,QAAM,EAAAxB,MAAA,QAAAA,MAAA,UAAAyB,IAAA,KAAEX,QAAA,CAAAY,iBAAA,IAAAZ,QAAA,CAAAY,iBAAA,IAAAD,IAAA,CAAiB;IAC1BpC,KAAK,EAAC,YAAY;IAClBsC,MAAM,EAAC;qCAETnC,mBAAA,CAES;IAFAK,OAAK,EAAAG,MAAA,QAAAA,MAAA,MAAAY,cAAA,KAAAa,IAAA,KAAUX,QAAA,CAAAc,cAAA,IAAAd,QAAA,CAAAc,cAAA,IAAAH,IAAA,CAAc;IAAEpC,KAAK,EAAC;KAAM,2BAEpD,E,GAGFG,mBAAA,CAAwE;IAA/DK,OAAK,EAAAG,MAAA,QAAAA,MAAA,UAAAyB,IAAA,KAAEX,QAAA,CAAAe,gBAAA,IAAAf,QAAA,CAAAe,gBAAA,IAAAJ,IAAA,CAAgB;IAAEpC,KAAK,EAAC;KAAa,YAAU,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}