{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      cartItems: [],\n      total_amount: null,\n      product: {\n        stock: null\n      }\n    };\n  },\n  async mounted() {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/cart\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authentication-Token\": localStorage.getItem(\"auth-token\")\n        }\n      });\n      const data = await response.json();\n      console.log(data);\n      if (response.ok) {\n        this.cartItems = data.cart;\n        this.total_amount = data.cart_price;\n      }\n    } catch (error) {\n      console.error(\"Error fetching cart items:\", error);\n      alert(\"Failed to fetch cart items. Please try again later.\");\n      this.$router.push(\"/\");\n    }\n  },\n  computed: {\n    currentUserEmail() {\n      return this.$store.state.currentUserEmail;\n    },\n    currentUserId() {\n      return this.$store.state.currentUserId;\n    },\n    currentUserName() {\n      return this.$store.state.currentUsername;\n    },\n    isUser() {\n      return this.account.roles.includes(\"<Role 2>\");\n    }\n  },\n  methods: {\n    async removeFromCart(productId) {\n      try {\n        const shouldRemove = window.confirm(\"Are you sure you want to remove this item from your cart?\");\n        if (!shouldRemove) {\n          return;\n        }\n        const response = await fetch(`http://localhost:5000/api/cart/${productId}`, {\n          method: \"DELETE\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authentication-Token\": localStorage.getItem(\"auth-token\")\n          }\n        });\n        const data = await response.json();\n        if (response.ok) {\n          this.cartItems = this.cartItems.filter(item => item.product_id !== productId);\n          this.total_amount = data.new_total_amount !== null ? data.new_total_amount : 0;\n          alert(\"Item removed from the cart\");\n          this.$router.push(`/user_dashboard/${this.currentUserEmail}`);\n        } else {\n          alert(\"Failed to remove item from the cart\");\n        }\n      } catch (error) {\n        console.error(\"Error removing item from cart:\", error);\n        alert(\"Item removed from the cart\");\n      }\n    },\n    async buyAll() {\n      try {\n        const response = await fetch(\"http://localhost:5000/api/buyCart\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authentication-Token\": localStorage.getItem(\"auth-token\")\n          }\n        });\n        const data = await response.json();\n        console.log(data);\n        if (response.ok) {\n          alert(\"Items successfully bought!\");\n          this.cartItems = [];\n          this.total_amount = 0;\n          this.$router.push(`/user_dashboard/${this.currentUserEmail}`);\n        } else {\n          alert(\"Failed to buy items. Please check your cart.\");\n        }\n      } catch (error) {\n        console.error(\"Error buying items:\", error);\n        alert(\"Failed to buy items. Please try again later.\");\n      }\n    },\n    promptBeforeBuy() {\n      const shouldBuy = window.confirm(\"Are you sure you want to buy all items?\");\n      if (shouldBuy) {\n        this.buyAll();\n      }\n    },\n    async editProductCount(productId, currentProductCount) {\n      try {\n        const newProductCount = window.prompt(\"Enter the new quantity:\", currentProductCount);\n        if (newProductCount !== null && !isNaN(newProductCount)) {\n          const response = await fetch(`http://localhost:5000/api/cart/${productId}`, {\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Authentication-Token\": localStorage.getItem(\"auth-token\")\n            },\n            body: JSON.stringify({\n              product_count: parseInt(newProductCount)\n            })\n          });\n          const data = await response.json();\n          console.log(data);\n          if (data.message === \"Product count updated successfully\") {\n            const updatedItem = this.cartItems.find(item => item.product_id === productId);\n            if (updatedItem) {\n              updatedItem.product_count = parseInt(newProductCount);\n            }\n            alert(\"Product count updated successfully\");\n          } else {\n            alert(`Failed to update product count: ${data.message}`);\n          }\n        } else {\n          alert(\"Invalid input. Please enter a valid number.\");\n        }\n      } catch (error) {\n        console.error(\"Error editing product count:\", error);\n        alert(\"Failed to edit product count. Please try again later.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","cartItems","total_amount","product","stock","mounted","response","fetch","method","headers","localStorage","getItem","json","console","log","ok","cart","cart_price","error","alert","$router","push","computed","currentUserEmail","$store","state","currentUserId","currentUserName","currentUsername","isUser","account","roles","includes","methods","removeFromCart","productId","shouldRemove","window","confirm","filter","item","product_id","new_total_amount","buyAll","promptBeforeBuy","shouldBuy","editProductCount","currentProductCount","newProductCount","prompt","isNaN","body","JSON","stringify","product_count","parseInt","message","updatedItem","find"],"sources":["C:\\Users\\mahak\\Downloads\\21f2000845-freshcart\\Mad 2 project\\freshcart\\src\\components\\cart_buy.vue"],"sourcesContent":["<template>\n  <div class=\"cart-container\">\n    <h2 style=\"text-align: center\">Your Cart</h2>\n    <div v-for=\"item in cartItems\" :key=\"item.id\" class=\"cart-item\">\n      <ul>\n        <li>\n          <div style=\"justify-content: space-between\">\n            <p>\n              <strong>Product Name: {{ item.product_name }}</strong>\n            </p>\n            <p>Price: {{ item.product_price }}</p>\n            <p>Quantity: {{ item.product_count }}</p>\n            <button\n              @click=\"removeFromCart(item.product_id)\"\n              class=\"remove-button\"\n            >\n              Remove\n            </button>\n            <button\n              @click=\"editProductCount(item.product_id, item.newProductCount)\"\n              class=\"edit-button\"\n            >\n              Edit\n            </button>\n          </div>\n        </li>\n      </ul>\n    </div>\n    <div v-if=\"cartItems.length !== 0\">\n      <button @click=\"promptBeforeBuy\" class=\"buy-button\">Buy All</button>\n      <p><strong>Total Amount:</strong> {{ total_amount }}</p>\n    </div>\n    <div v-else>Your Cart is empty.</div>\n    <router-link :to=\"'/user_dashboard/' + currentUserEmail\" class=\"back-button\"\n      >Back to Dashboard</router-link\n    >\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      cartItems: [],\n      total_amount: null,\n      product: {\n        stock: null,\n      },\n    };\n  },\n  async mounted() {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/cart\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authentication-Token\": localStorage.getItem(\"auth-token\"),\n        },\n      });\n      const data = await response.json();\n      console.log(data);\n\n      if (response.ok) {\n        this.cartItems = data.cart;\n        this.total_amount = data.cart_price;\n      }\n    } catch (error) {\n      console.error(\"Error fetching cart items:\", error);\n      alert(\"Failed to fetch cart items. Please try again later.\");\n      this.$router.push(\"/\");\n    }\n  },\n  computed: {\n    currentUserEmail() {\n      return this.$store.state.currentUserEmail;\n    },\n    currentUserId() {\n      return this.$store.state.currentUserId;\n    },\n\n    currentUserName() {\n      return this.$store.state.currentUsername;\n    },\n    isUser() {\n      return this.account.roles.includes(\"<Role 2>\");\n    },\n  },\n  methods: {\n    async removeFromCart(productId) {\n      try {\n        const shouldRemove = window.confirm(\n          \"Are you sure you want to remove this item from your cart?\"\n        );\n        if (!shouldRemove) {\n          return;\n        }\n\n        const response = await fetch(\n          `http://localhost:5000/api/cart/${productId}`,\n          {\n            method: \"DELETE\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Authentication-Token\": localStorage.getItem(\"auth-token\"),\n            },\n          }\n        );\n\n        const data = await response.json();\n\n        if (response.ok) {\n          this.cartItems = this.cartItems.filter(\n            (item) => item.product_id !== productId\n          );\n          this.total_amount =\n            data.new_total_amount !== null ? data.new_total_amount : 0;\n\n          alert(\"Item removed from the cart\");\n          this.$router.push(`/user_dashboard/${this.currentUserEmail}`);\n        } else {\n          alert(\"Failed to remove item from the cart\");\n        }\n      } catch (error) {\n        console.error(\"Error removing item from cart:\", error);\n        alert(\"Item removed from the cart\");\n      }\n    },\n\n    async buyAll() {\n      try {\n        const response = await fetch(\"http://localhost:5000/api/buyCart\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authentication-Token\": localStorage.getItem(\"auth-token\"),\n          },\n        });\n\n        const data = await response.json();\n        console.log(data);\n\n        if (response.ok) {\n          alert(\"Items successfully bought!\");\n          this.cartItems = [];\n          this.total_amount = 0;\n          this.$router.push(`/user_dashboard/${this.currentUserEmail}`);\n        } else {\n          alert(\"Failed to buy items. Please check your cart.\");\n        }\n      } catch (error) {\n        console.error(\"Error buying items:\", error);\n        alert(\"Failed to buy items. Please try again later.\");\n      }\n    },\n\n    promptBeforeBuy() {\n      const shouldBuy = window.confirm(\n        \"Are you sure you want to buy all items?\"\n      );\n      if (shouldBuy) {\n        this.buyAll();\n      }\n    },\n\n    async editProductCount(productId, currentProductCount) {\n      try {\n        const newProductCount = window.prompt(\n          \"Enter the new quantity:\",\n          currentProductCount\n        );\n\n        if (newProductCount !== null && !isNaN(newProductCount)) {\n          const response = await fetch(\n            `http://localhost:5000/api/cart/${productId}`,\n            {\n              method: \"PUT\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authentication-Token\": localStorage.getItem(\"auth-token\"),\n              },\n              body: JSON.stringify({\n                product_count: parseInt(newProductCount),\n              }),\n            }\n          );\n\n          const data = await response.json();\n          console.log(data);\n\n          if (data.message === \"Product count updated successfully\") {\n            const updatedItem = this.cartItems.find(\n              (item) => item.product_id === productId\n            );\n            if (updatedItem) {\n              updatedItem.product_count = parseInt(newProductCount);\n            }\n            alert(\"Product count updated successfully\");\n          } else {\n            alert(`Failed to update product count: ${data.message}`);\n          }\n        } else {\n          alert(\"Invalid input. Please enter a valid number.\");\n        }\n      } catch (error) {\n        console.error(\"Error editing product count:\", error);\n        alert(\"Failed to edit product count. Please try again later.\");\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.cart-container {\n  width: 40%;\n  margin: 20px auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  background: linear-gradient(to right, #a9f160, #87cefa);\n}\n\nh2 {\n  color: #333;\n}\n\n.cart-item {\n  margin-bottom: 10px;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n}\n\n.remove-button {\n  background-color: #dc3545;\n  color: white;\n  padding: 5px 10px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n.edit-button {\n  background-color: #35dc4b;\n  color: white;\n  padding: 5px 10px;\n  border: none;\n  margin-left: 5px;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.buy-button {\n  background-color: #28a745;\n  color: white;\n  margin-right: 10px;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.back-button {\n  display: inline-block;\n  margin-top: 10px;\n  padding: 8px 16px;\n  text-decoration: none;\n  background-color: #333;\n  color: white;\n  border-radius: 4px;\n  cursor: pointer;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}